#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Scripts de Deploy e Configura√ß√£o
Utilit√°rios para preparar e verificar o ambiente de produ√ß√£o
"""

import os
import sys
import json
import subprocess
from pathlib import Path

def verificar_arquivos_deploy():
    """Verifica se todos os arquivos necess√°rios para deploy est√£o presentes"""
    arquivos_necessarios = [
        'requirements.txt',
        'Procfile',
        'railway.json',
        '.env.example',
        '.gitignore',
        'runtime.txt',
        'app_mapa_interativo.py',
        'sistema_persistencia.py',
        'pernambuco_dados_gerar_mapa.csv',
        'pernambuco.json',
        'zona_cores_mapping.json',
        'templates/mapa_interativo.html'
    ]
    
    print("üîç Verificando arquivos necess√°rios para deploy...")
    
    arquivos_faltando = []
    for arquivo in arquivos_necessarios:
        if not Path(arquivo).exists():
            arquivos_faltando.append(arquivo)
            print(f"‚ùå {arquivo} - FALTANDO")
        else:
            print(f"‚úÖ {arquivo} - OK")
    
    if arquivos_faltando:
        print(f"\n‚ö†Ô∏è  {len(arquivos_faltando)} arquivo(s) faltando!")
        return False
    else:
        print("\nüéâ Todos os arquivos necess√°rios est√£o presentes!")
        return True

def verificar_dependencias():
    """Verifica se todas as depend√™ncias est√£o instaladas"""
    print("\nüì¶ Verificando depend√™ncias...")
    
    try:
        with open('requirements.txt', 'r') as f:
            requirements = f.read().splitlines()
        
        dependencias_faltando = []
        for req in requirements:
            if req.strip() and not req.startswith('#'):
                package = req.split('==')[0].split('>=')[0].split('<=')[0]
                try:
                    __import__(package.replace('-', '_'))
                    print(f"‚úÖ {package} - OK")
                except ImportError:
                    dependencias_faltando.append(package)
                    print(f"‚ùå {package} - FALTANDO")
        
        if dependencias_faltando:
            print(f"\n‚ö†Ô∏è  {len(dependencias_faltando)} depend√™ncia(s) faltando!")
            print("Execute: pip install -r requirements.txt")
            return False
        else:
            print("\nüéâ Todas as depend√™ncias est√£o instaladas!")
            return True
            
    except FileNotFoundError:
        print("‚ùå Arquivo requirements.txt n√£o encontrado!")
        return False

def verificar_configuracao():
    """Verifica configura√ß√µes do projeto"""
    print("\n‚öôÔ∏è  Verificando configura√ß√µes...")
    
    # Verificar se o arquivo principal existe e est√° configurado
    if not Path('app_mapa_interativo.py').exists():
        print("‚ùå app_mapa_interativo.py n√£o encontrado!")
        return False
    
    # Verificar se os dados essenciais existem
    dados_essenciais = [
        'pernambuco_dados_gerar_mapa.csv',
        'pernambuco.json',
        'zona_cores_mapping.json'
    ]
    
    for arquivo in dados_essenciais:
        if not Path(arquivo).exists():
            print(f"‚ùå Arquivo de dados {arquivo} n√£o encontrado!")
            return False
        else:
            print(f"‚úÖ {arquivo} - OK")
    
    # Verificar estrutura de pastas
    pastas_necessarias = ['templates', 'backups', 'historico']
    for pasta in pastas_necessarias:
        if not Path(pasta).exists():
            print(f"‚ö†Ô∏è  Pasta {pasta} n√£o existe, criando...")
            Path(pasta).mkdir(exist_ok=True)
        print(f"‚úÖ Pasta {pasta} - OK")
    
    print("\nüéâ Configura√ß√µes verificadas com sucesso!")
    return True

def gerar_env_producao():
    """Gera arquivo .env para produ√ß√£o baseado no .env.example"""
    print("\nüîß Gerando configura√ß√µes de produ√ß√£o...")
    
    if not Path('.env.example').exists():
        print("‚ùå Arquivo .env.example n√£o encontrado!")
        return False
    
    if Path('.env').exists():
        resposta = input("Arquivo .env j√° existe. Sobrescrever? (s/N): ")
        if resposta.lower() != 's':
            print("Opera√ß√£o cancelada.")
            return False
    
    # Ler template
    with open('.env.example', 'r') as f:
        template = f.read()
    
    # Substituir valores para produ√ß√£o
    env_producao = template.replace('FLASK_ENV=production', 'FLASK_ENV=production')
    env_producao = env_producao.replace('DEBUG=False', 'DEBUG=False')
    env_producao = env_producao.replace('SECRET_KEY=mapa_interativo_2025_production_key_change_this', 
                                       f'SECRET_KEY=mapa_interativo_2025_prod_{os.urandom(16).hex()}')
    
    # Salvar arquivo .env
    with open('.env', 'w') as f:
        f.write(env_producao)
    
    print("‚úÖ Arquivo .env criado com configura√ß√µes de produ√ß√£o!")
    print("‚ö†Ô∏è  IMPORTANTE: Adicione o .env ao .gitignore para n√£o commit√°-lo!")
    return True

def testar_aplicacao_local():
    """Testa a aplica√ß√£o localmente antes do deploy"""
    print("\nüß™ Testando aplica√ß√£o localmente...")
    
    try:
        # Importar e testar m√≥dulos principais
        from app_mapa_interativo import app, gerenciador
        from sistema_persistencia import SistemaPersistencia
        
        print("‚úÖ Importa√ß√µes principais - OK")
        
        # Testar carregamento de dados
        if hasattr(gerenciador, 'dados_municipios') and len(gerenciador.dados_municipios) > 0:
            print(f"‚úÖ Dados carregados - {len(gerenciador.dados_municipios)} munic√≠pios")
        else:
            print("‚ùå Erro no carregamento de dados")
            return False
        
        # Testar configura√ß√£o Flask
        if app.config.get('SECRET_KEY'):
            print("‚úÖ Configura√ß√£o Flask - OK")
        else:
            print("‚ùå Configura√ß√£o Flask incompleta")
            return False
        
        print("\nüéâ Aplica√ß√£o testada com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar aplica√ß√£o: {e}")
        return False

def executar_verificacao_completa():
    """Executa verifica√ß√£o completa do projeto"""
    print("üöÄ VERIFICA√á√ÉO COMPLETA PARA DEPLOY NA RAILWAY")
    print("=" * 50)
    
    verificacoes = [
        ("Arquivos de Deploy", verificar_arquivos_deploy),
        ("Depend√™ncias Python", verificar_dependencias),
        ("Configura√ß√µes", verificar_configuracao),
        ("Teste da Aplica√ß√£o", testar_aplicacao_local)
    ]
    
    resultados = []
    for nome, funcao in verificacoes:
        print(f"\n{'='*20} {nome} {'='*20}")
        resultado = funcao()
        resultados.append((nome, resultado))
    
    print("\n" + "="*50)
    print("üìä RESUMO DA VERIFICA√á√ÉO")
    print("="*50)
    
    sucesso_total = True
    for nome, resultado in resultados:
        status = "‚úÖ PASSOU" if resultado else "‚ùå FALHOU"
        print(f"{nome}: {status}")
        if not resultado:
            sucesso_total = False
    
    if sucesso_total:
        print("\nüéâ PROJETO PRONTO PARA DEPLOY!")
        print("\nüìã Pr√≥ximos passos:")
        print("1. Commit e push para o GitHub")
        print("2. Conectar reposit√≥rio na Railway")
        print("3. Configurar vari√°veis de ambiente")
        print("4. Fazer deploy!")
    else:
        print("\n‚ö†Ô∏è  CORRIJA OS PROBLEMAS ANTES DO DEPLOY")
        print("\nConsulte o README_DEPLOY.md para mais informa√ß√µes.")
    
    return sucesso_total

if __name__ == "__main__":
    if len(sys.argv) > 1:
        comando = sys.argv[1]
        if comando == "verificar":
            executar_verificacao_completa()
        elif comando == "env":
            gerar_env_producao()
        elif comando == "test":
            testar_aplicacao_local()
        else:
            print("Comandos dispon√≠veis: verificar, env, test")
    else:
        executar_verificacao_completa()