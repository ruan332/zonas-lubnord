#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para adicionar nova UF ao sistema
Facilita a cria√ß√£o de estrutura e arquivos para novas Unidades Federativas
"""

import os
import json
import pandas as pd
from pathlib import Path
from gerenciador_multi_uf import GerenciadorMultiUF

def main():
    print("üó∫Ô∏è Script para Adicionar Nova UF")
    print("=" * 50)
    
    # Inicializar gerenciador
    gerenciador = GerenciadorMultiUF()
    
    # Listar UFs existentes
    print("\nüìã UFs j√° cadastradas:")
    ufs_existentes = gerenciador.obter_ufs_disponiveis()
    for uf in ufs_existentes:
        status_icon = "‚úÖ" if uf['status'] == 'ativo' else "‚ö†Ô∏è"
        print(f"  {status_icon} {uf['codigo']} - {uf['nome']} ({uf['total_municipios']} munic√≠pios)")
    
    print("\n" + "=" * 50)
    
    # Solicitar informa√ß√µes da nova UF
    while True:
        codigo_uf = input("\nüè∑Ô∏è Digite o c√≥digo da UF (ex: SP, RJ, MG): ").strip().upper()
        
        if not codigo_uf:
            print("‚ùå C√≥digo da UF √© obrigat√≥rio!")
            continue
        
        if len(codigo_uf) != 2:
            print("‚ùå C√≥digo da UF deve ter exatamente 2 caracteres!")
            continue
        
        if codigo_uf in [uf['codigo'] for uf in ufs_existentes]:
            print(f"‚ùå UF {codigo_uf} j√° existe no sistema!")
            continue
        
        break
    
    nome_uf = input(f"üìç Digite o nome completo da UF {codigo_uf}: ").strip()
    if not nome_uf:
        print("‚ùå Nome da UF √© obrigat√≥rio!")
        return
    
    # Confirmar cria√ß√£o
    print(f"\nüìù Resumo da nova UF:")
    print(f"   C√≥digo: {codigo_uf}")
    print(f"   Nome: {nome_uf}")
    print(f"   Diret√≥rio: dados_ufs/{codigo_uf}/")
    
    confirmar = input("\n‚úÖ Confirma a cria√ß√£o? (s/N): ").strip().lower()
    if confirmar not in ['s', 'sim', 'y', 'yes']:
        print("‚ùå Opera√ß√£o cancelada.")
        return
    
    # Criar UF
    print(f"\nüîÑ Criando UF {codigo_uf}...")
    sucesso = gerenciador.adicionar_uf(codigo_uf, nome_uf)
    
    if sucesso:
        print(f"‚úÖ UF {nome_uf} ({codigo_uf}) criada com sucesso!")
        
        # Mostrar pr√≥ximos passos
        config_uf = gerenciador.ufs_disponiveis[codigo_uf]
        diretorio_uf = gerenciador.diretorio_base / config_uf.diretorio
        
        print(f"\nüìÅ Arquivos criados em: {diretorio_uf}")
        print(f"   üìÑ {config_uf.arquivo_dados} (dados dos munic√≠pios)")
        print(f"   üó∫Ô∏è {config_uf.arquivo_geometrias} (geometrias GeoJSON)")
        print(f"   üé® {config_uf.arquivo_cores} (cores das zonas)")
        print(f"   üíæ alteracoes_zonas.json (hist√≥rico de altera√ß√µes)")
        
        print(f"\nüìã PR√ìXIMOS PASSOS:")
        print(f"1. Substitua o arquivo {config_uf.arquivo_dados} pelos dados reais da UF")
        print(f"2. Substitua o arquivo {config_uf.arquivo_geometrias} pelo GeoJSON real da UF")
        print(f"3. Ajuste as zonas e cores no arquivo {config_uf.arquivo_cores}")
        print(f"4. Execute o sistema multi-UF: python app_mapa_multi_uf.py")
        
        # Perguntar se quer criar arquivo de exemplo
        criar_exemplo = input(f"\nüìù Criar arquivo CSV de exemplo com estrutura correta? (s/N): ").strip().lower()
        if criar_exemplo in ['s', 'sim', 'y', 'yes']:
            criar_arquivo_exemplo(diretorio_uf, config_uf.arquivo_dados, codigo_uf, nome_uf)
        
    else:
        print(f"‚ùå Erro ao criar UF {codigo_uf}")

def criar_arquivo_exemplo(diretorio_uf, nome_arquivo, codigo_uf, nome_uf):
    """Cria arquivo CSV de exemplo com estrutura completa"""
    try:
        # Dados de exemplo mais completos
        dados_exemplo = {
            'UF': [codigo_uf] * 5,
            'Mesorregi√£o Geogr√°fica': [
                'Regi√£o Metropolitana',
                'Regi√£o Norte',
                'Regi√£o Sul',
                'Regi√£o Leste',
                'Regi√£o Oeste'
            ],
            'CD_Mun': [
                f'{codigo_uf}00001',
                f'{codigo_uf}00002', 
                f'{codigo_uf}00003',
                f'{codigo_uf}00004',
                f'{codigo_uf}00005'
            ],
            'Cidade': [
                f'Capital {nome_uf}',
                f'Munic√≠pio Norte',
                f'Munic√≠pio Sul',
                f'Munic√≠pio Leste',
                f'Munic√≠pio Oeste'
            ],
            'Zona': [
                'Zona Central',
                'Zona Norte',
                'Zona Sul',
                'Zona Leste',
                'Zona Oeste'
            ],
            'SELL OUT ANUAL': [150000, 80000, 120000, 90000, 70000],
            'SELL OUT M√äS': [12500, 6667, 10000, 7500, 5833],
            'POTENCIAL ANUAL': [200000, 100000, 150000, 110000, 90000],
            'POTENCIAL M√äS': [16667, 8333, 12500, 9167, 7500],
            'POPULA√á√ÉO ': [1500000, 300000, 450000, 350000, 250000],
            'PDV': [2500, 800, 1200, 900, 600],
            '%SHARE': [75.0, 80.0, 80.0, 81.8, 77.8]
        }
        
        df_exemplo = pd.DataFrame(dados_exemplo)
        arquivo_exemplo = diretorio_uf / nome_arquivo
        df_exemplo.to_csv(arquivo_exemplo, index=False)
        
        print(f"‚úÖ Arquivo de exemplo criado: {arquivo_exemplo}")
        print(f"   üìä {len(df_exemplo)} munic√≠pios de exemplo")
        print(f"   üìã Colunas: {', '.join(df_exemplo.columns)}")
        
    except Exception as e:
        print(f"‚ùå Erro ao criar arquivo de exemplo: {e}")

def listar_ufs_sistema():
    """Lista todas as UFs do sistema com detalhes"""
    print("\nüó∫Ô∏è Listagem Completa de UFs no Sistema")
    print("=" * 60)
    
    gerenciador = GerenciadorMultiUF()
    ufs = gerenciador.obter_ufs_disponiveis()
    
    if not ufs:
        print("‚ùå Nenhuma UF encontrada no sistema")
        return
    
    for uf in ufs:
        status_icon = "‚úÖ" if uf['status'] == 'ativo' else "‚ö†Ô∏è"
        print(f"\n{status_icon} {uf['codigo']} - {uf['nome']}")
        print(f"   üìä Munic√≠pios: {uf['total_municipios']}")
        print(f"   üìÅ Status: {uf['status'].title()}")
        
        # Mostrar detalhes dos arquivos se UF estiver ativa
        if uf['status'] == 'ativo' and uf['codigo'] in gerenciador.ufs_disponiveis:
            config = gerenciador.ufs_disponiveis[uf['codigo']]
            diretorio = gerenciador.diretorio_base / config.diretorio
            print(f"   üìÇ Diret√≥rio: {diretorio}")
            
            # Verificar arquivos
            arquivos = [
                (config.arquivo_dados, "Dados"),
                (config.arquivo_geometrias, "Geometrias"),
                (config.arquivo_cores, "Cores"),
                ("alteracoes_zonas.json", "Altera√ß√µes")
            ]
            
            for arquivo, descricao in arquivos:
                caminho = diretorio / arquivo
                if caminho.exists():
                    tamanho = caminho.stat().st_size
                    print(f"   ‚úÖ {descricao}: {arquivo} ({tamanho:,} bytes)")
                else:
                    print(f"   ‚ùå {descricao}: {arquivo} (n√£o encontrado)")

def verificar_estrutura_uf():
    """Verifica estrutura de uma UF espec√≠fica"""
    print("\nüîç Verifica√ß√£o de Estrutura de UF")
    print("=" * 40)
    
    gerenciador = GerenciadorMultiUF()
    ufs = gerenciador.obter_ufs_disponiveis()
    
    if not ufs:
        print("‚ùå Nenhuma UF encontrada no sistema")
        return
    
    print("UFs dispon√≠veis:")
    for i, uf in enumerate(ufs, 1):
        print(f"  {i}. {uf['codigo']} - {uf['nome']}")
    
    try:
        escolha = int(input("\nEscolha uma UF (n√∫mero): ")) - 1
        if 0 <= escolha < len(ufs):
            uf_escolhida = ufs[escolha]
            verificar_uf_detalhada(gerenciador, uf_escolhida['codigo'])
        else:
            print("‚ùå Escolha inv√°lida")
    except ValueError:
        print("‚ùå Digite um n√∫mero v√°lido")

def verificar_uf_detalhada(gerenciador, codigo_uf):
    """Verifica estrutura detalhada de uma UF"""
    if codigo_uf not in gerenciador.ufs_disponiveis:
        print(f"‚ùå UF {codigo_uf} n√£o encontrada")
        return
    
    config = gerenciador.ufs_disponiveis[codigo_uf]
    diretorio = gerenciador.diretorio_base / config.diretorio
    
    print(f"\nüîç Verificando UF {config.nome} ({codigo_uf})")
    print(f"üìÇ Diret√≥rio: {diretorio}")
    
    # Verificar arquivo de dados
    arquivo_dados = diretorio / config.arquivo_dados
    print(f"\nüìÑ Arquivo de Dados: {config.arquivo_dados}")
    if arquivo_dados.exists():
        try:
            df = pd.read_csv(arquivo_dados)
            print(f"   ‚úÖ Arquivo existe ({arquivo_dados.stat().st_size:,} bytes)")
            print(f"   üìä {len(df)} registros")
            print(f"   üìã Colunas: {', '.join(df.columns)}")
            
            # Verificar colunas essenciais
            colunas_essenciais = ['UF', 'CD_Mun', 'Cidade', 'Zona']
            colunas_faltantes = [col for col in colunas_essenciais if col not in df.columns]
            if colunas_faltantes:
                print(f"   ‚ö†Ô∏è Colunas essenciais faltantes: {', '.join(colunas_faltantes)}")
            else:
                print(f"   ‚úÖ Todas as colunas essenciais presentes")
                
        except Exception as e:
            print(f"   ‚ùå Erro ao ler arquivo: {e}")
    else:
        print(f"   ‚ùå Arquivo n√£o encontrado")
    
    # Verificar arquivo de geometrias
    arquivo_geo = diretorio / config.arquivo_geometrias
    print(f"\nüó∫Ô∏è Arquivo de Geometrias: {config.arquivo_geometrias}")
    if arquivo_geo.exists():
        try:
            with open(arquivo_geo, 'r') as f:
                geo_data = json.load(f)
            print(f"   ‚úÖ Arquivo existe ({arquivo_geo.stat().st_size:,} bytes)")
            if 'features' in geo_data:
                print(f"   üó∫Ô∏è {len(geo_data['features'])} features")
            else:
                print(f"   ‚ö†Ô∏è Estrutura GeoJSON inv√°lida")
        except Exception as e:
            print(f"   ‚ùå Erro ao ler arquivo: {e}")
    else:
        print(f"   ‚ùå Arquivo n√£o encontrado")
    
    # Verificar arquivo de cores
    arquivo_cores = diretorio / config.arquivo_cores
    print(f"\nüé® Arquivo de Cores: {config.arquivo_cores}")
    if arquivo_cores.exists():
        try:
            with open(arquivo_cores, 'r') as f:
                cores_data = json.load(f)
            print(f"   ‚úÖ Arquivo existe ({arquivo_cores.stat().st_size:,} bytes)")
            print(f"   üé® {len(cores_data)} zonas configuradas")
            for zona, cor in cores_data.items():
                print(f"      ‚Ä¢ {zona}: {cor}")
        except Exception as e:
            print(f"   ‚ùå Erro ao ler arquivo: {e}")
    else:
        print(f"   ‚ùå Arquivo n√£o encontrado")

if __name__ == "__main__":
    print("üó∫Ô∏è Utilit√°rio de Gest√£o de UFs")
    print("=" * 40)
    print("1. Adicionar nova UF")
    print("2. Listar UFs do sistema")
    print("3. Verificar estrutura de UF")
    print("0. Sair")
    
    while True:
        try:
            opcao = input("\nEscolha uma op√ß√£o: ").strip()
            
            if opcao == "1":
                main()
            elif opcao == "2":
                listar_ufs_sistema()
            elif opcao == "3":
                verificar_estrutura_uf()
            elif opcao == "0":
                print("üëã At√© logo!")
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida")
                
        except KeyboardInterrupt:
            print("\nüëã At√© logo!")
            break
        except Exception as e:
            print(f"‚ùå Erro: {e}")
