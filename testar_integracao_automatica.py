#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste da integra√ß√£o autom√°tica da extens√£o Multi-UF
"""

import requests
import time

def testar_integracao_automatica():
    """
    Testa se a integra√ß√£o autom√°tica da extens√£o Multi-UF funcionou
    """
    print("üß™ TESTE DA INTEGRA√á√ÉO AUTOM√ÅTICA MULTI-UF")
    print("=" * 60)
    
    base_url = "http://localhost:5001"
    
    try:
        # Aguardar um pouco para o servidor inicializar
        print("‚è≥ Aguardando inicializa√ß√£o do servidor...")
        time.sleep(3)
        
        # 1. Testar API de UFs dispon√≠veis
        print("1Ô∏è‚É£ Testando API de UFs dispon√≠veis...")
        
        response = requests.get(f"{base_url}/api/ufs_disponiveis", timeout=10)
        if response.status_code == 200:
            dados = response.json()
            
            print(f"   üìã Resposta da API:")
            print(f"      ‚Ä¢ Sucesso: {dados.get('sucesso')}")
            print(f"      ‚Ä¢ Modo Multi-UF: {dados.get('modo_multi_uf')}")
            print(f"      ‚Ä¢ UF Atual: {dados.get('uf_atual')}")
            
            ufs = dados.get('ufs', [])
            print(f"      ‚Ä¢ UFs Dispon√≠veis: {len(ufs)}")
            
            for uf in ufs:
                print(f"         - {uf.get('codigo')}: {uf.get('nome')}")
            
            if len(ufs) >= 3:
                print("   ‚úÖ Extens√£o Multi-UF carregada com sucesso!")
                print("   ‚úÖ Todas as UFs est√£o dispon√≠veis")
                return True
            else:
                print(f"   ‚ùå Apenas {len(ufs)} UFs dispon√≠veis (esperado: 3)")
                return False
                
        else:
            print(f"   ‚ùå Erro na API: {response.status_code}")
            
            # Tentar verificar se a rota existe
            try:
                response_404 = requests.get(f"{base_url}/api/ufs_disponiveis")
                if response_404.status_code == 404:
                    print("   ‚ùå Rota /api/ufs_disponiveis n√£o encontrada")
                    print("   ‚ùå Extens√£o Multi-UF N√ÉO foi carregada")
            except:
                pass
                
            return False
        
    except requests.exceptions.ConnectionError:
        print("   ‚ùå N√£o foi poss√≠vel conectar ao servidor")
        print("   üí° Execute: python app_mapa_interativo.py")
        return False
    except Exception as e:
        print(f"‚ùå Erro durante teste: {e}")
        return False

def instrucoes_teste_completo():
    """
    Instru√ß√µes para teste completo
    """
    print(f"\n" + "=" * 60)
    print("üìã INSTRU√á√ïES PARA TESTE COMPLETO")
    print("=" * 60)
    
    print("üöÄ COMO TESTAR A CORRE√á√ÉO:")
    
    print(f"\n1Ô∏è‚É£ Parar servidor atual (se estiver rodando):")
    print("   ‚Ä¢ Pressione Ctrl+C no terminal do servidor")
    
    print(f"\n2Ô∏è‚É£ Iniciar com integra√ß√£o autom√°tica:")
    print("   python app_mapa_interativo.py")
    
    print(f"\n3Ô∏è‚É£ Observar mensagens de inicializa√ß√£o:")
    print("   ‚úÖ Deve aparecer:")
    print("      ‚Ä¢ ‚úÖ Extens√£o Multi-UF carregada automaticamente!")
    print("      ‚Ä¢ üó∫Ô∏è UFs dispon√≠veis: ['AL', 'PE', 'SE']")
    print("      ‚Ä¢ üó∫Ô∏è Mapa interativo com sistema Multi-UF integrado")
    
    print(f"\n4Ô∏è‚É£ Testar interface:")
    print("   ‚Ä¢ Acesse: http://localhost:5001")
    print("   ‚Ä¢ Clique no seletor de UF")
    print("   ‚Ä¢ Deve mostrar 3 op√ß√µes: AL, PE, SE")
    
    print(f"\n5Ô∏è‚É£ Testar funcionalidade:")
    print("   ‚Ä¢ Selecione AL (Alagoas)")
    print("   ‚Ä¢ Mapa deve mudar para Alagoas")
    print("   ‚Ä¢ Estat√≠sticas devem atualizar")
    print("   ‚Ä¢ Teste download multi-UF")

def comparar_metodos():
    """
    Compara os diferentes m√©todos de execu√ß√£o
    """
    print(f"\n" + "=" * 60)
    print("üîÑ COMPARA√á√ÉO DOS M√âTODOS DE EXECU√á√ÉO")
    print("=" * 60)
    
    print("üìä M√âTODOS DISPON√çVEIS:")
    
    print(f"\n1Ô∏è‚É£ python app_mapa_interativo.py (NOVO - RECOMENDADO)")
    print("   ‚úÖ Extens√£o Multi-UF carregada automaticamente")
    print("   ‚úÖ Seletor com 3 UFs (PE, AL, SE)")
    print("   ‚úÖ Compat√≠vel com deploy (Procfile atual)")
    print("   ‚úÖ Funciona independentemente")
    
    print(f"\n2Ô∏è‚É£ python inicializar_multi_uf.py (ANTIGO)")
    print("   ‚úÖ Extens√£o Multi-UF carregada manualmente")
    print("   ‚úÖ Seletor com 3 UFs (PE, AL, SE)")
    print("   ‚ö†Ô∏è Requer arquivo separado")
    print("   ‚ö†Ô∏è Mais complexo para deploy")
    
    print(f"\n3Ô∏è‚É£ python app_mapa_multi_uf.py (ALTERNATIVO)")
    print("   ‚úÖ Sistema Multi-UF nativo")
    print("   ‚úÖ Seletor com 3 UFs (PE, AL, SE)")
    print("   ‚ùå Requer mudan√ßa no Procfile")
    print("   ‚ùå Sem fallback autom√°tico")
    
    print(f"\nüéØ RECOMENDA√á√ÉO FINAL:")
    print("   Use: python app_mapa_interativo.py")
    print("   ‚Ä¢ Melhor compatibilidade")
    print("   ‚Ä¢ Deploy sem mudan√ßas")
    print("   ‚Ä¢ Funcionalidade completa")

if __name__ == "__main__":
    print("üöÄ TESTE DA INTEGRA√á√ÉO AUTOM√ÅTICA MULTI-UF")
    
    sucesso = testar_integracao_automatica()
    instrucoes_teste_completo()
    comparar_metodos()
    
    if sucesso:
        print(f"\nüéØ INTEGRA√á√ÉO AUTOM√ÅTICA FUNCIONANDO!")
        print("   Agora o app_mapa_interativo.py tem Multi-UF completo")
        print("   Pronto para deploy sem mudan√ßas no Procfile")
    else:
        print(f"\n‚ùå PROBLEMAS NA INTEGRA√á√ÉO")
        print("   Verificar se o servidor est√° rodando com as corre√ß√µes")
